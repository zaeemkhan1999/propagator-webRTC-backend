// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Apsy.App.Propagator.Infrastructure.Migrations
{
    [DbContext(typeof(DataReadContext))]
    [Migration("20241029134102_IconLayoutType")]
    partial class IconLayoutType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AdminTodayLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BansCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StrikeCount")
                        .HasColumnType("int");

                    b.Property<int>("SuspendedCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminTodayLimitation");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Ads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdsRejectionStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscountCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompletedPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LatestPaymentDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LatestPaymentIntentId")
                        .HasColumnType("longtext");

                    b.Property<int>("ManualStatus")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeopleCanSee")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<double?>("PricePerPerson")
                        .HasColumnType("double");

                    b.Property<int?>("TargetEndAge")
                        .HasColumnType("int");

                    b.Property<int?>("TargetGenders")
                        .HasColumnType("int");

                    b.Property<string>("TargetLocation")
                        .HasColumnType("longtext");

                    b.Property<int?>("TargetStartAge")
                        .HasColumnType("int");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("TotalViewed")
                        .HasColumnType("int");

                    b.Property<double?>("TotlaAmount")
                        .HasColumnType("double");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AppealAds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("AdsId")
                        .HasColumnType("int");

                    b.Property<int>("AppealStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AdsId");

                    b.ToTable("AppealAds");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("VerificationTwoFactorCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleCommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("ArticleItems")
                        .HasColumnType("longtext");

                    b.Property<string>("ArticleItemsString")
                        .HasColumnType("longtext");

                    b.Property<int>("ArticleLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("ArticleType")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<bool>("IsByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompletedPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPromote")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerifield")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LatestPromoteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LatestUpdateThisWeeks")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NotInterestedArticlesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SaveArticlesCount")
                        .HasColumnType("int");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<int>("ThisWeekArticleCommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekArticleLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekHits")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekNotInterestedArticlesCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekSaveArticlesCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekShareCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isCreatedInGroup")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int?>("MentionId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MentionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleComment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Liked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleLike");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.BlockUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockedId")
                        .HasColumnType("int");

                    b.Property<int>("BlockerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMutual")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BlockedId");

                    b.HasIndex("BlockerId");

                    b.ToTable("BlockUser");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int?>("MentionId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FirstUnreadCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstUserDeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FirstUserId")
                        .HasColumnType("int");

                    b.Property<string>("GroupDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupImgageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupLink")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFirstUserDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSecondUserDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LatestMessageDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LatestMessageUserId")
                        .HasColumnType("int");

                    b.Property<int>("SecondUnreadCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SecondUserDeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SecondUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscountCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.HideStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HidedId")
                        .HasColumnType("int");

                    b.Property<int>("HiderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HidedId");

                    b.HasIndex("HiderId");

                    b.ToTable("HideStory");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.HighLight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HighLight");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.InterestedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FollowersUserId")
                        .HasColumnType("int");

                    b.Property<int>("InterestedUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FollowersUserId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("InterestedUser");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeArticleComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeArticleComment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeComment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LinkType")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PostId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContentAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShare")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("StoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StoryId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdsId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleLikeId")
                        .HasColumnType("int");

                    b.Property<int?>("Articled")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LikeArticleCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("LikeCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("PostLikeId")
                        .HasColumnType("int");

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("StoryCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("StoryId")
                        .HasColumnType("int");

                    b.Property<int?>("StoryLikeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserFollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdsId");

                    b.HasIndex("ArticleCommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ArticleLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("LikeArticleCommentId");

                    b.HasIndex("LikeCommentId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PostId");

                    b.HasIndex("PostLikeId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StoryCommentId");

                    b.HasIndex("StoryId");

                    b.HasIndex("StoryLikeId");

                    b.HasIndex("UserFollowerId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.NotInterestedArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("NotInterestedArticle");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.NotInterestedPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("NotInterestedPost");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdsId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("AmountWithoutDiscount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeleteAccountDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeletedAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentConfirmationStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("TransferId")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdsId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowDownload")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<int>("IconLayoutType")
                        .HasColumnType("int");

                    b.Property<bool>("IsByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompletedPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCreatedInGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPromote")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LatestPromoteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LatestUpdateThisWeeks")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<int>("NotInterestedPostsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostItems")
                        .HasColumnType("longtext");

                    b.Property<string>("PostItemsString")
                        .HasColumnType("longtext");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PosterId")
                        .HasColumnType("int");

                    b.Property<int>("SavePostsCount")
                        .HasColumnType("int");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.Property<string>("StringTags")
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.Property<int>("ThisWeekCommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekHits")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekNotInterestedPostsCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekSavePostsCount")
                        .HasColumnType("int");

                    b.Property<int>("ThisWeekShareCount")
                        .HasColumnType("int");

                    b.Property<string>("YourMind")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.PostLikes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Liked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.PublicNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FromAge")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSendAll")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("ToAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PublicNotification");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<int?>("ReportedId")
                        .HasColumnType("int");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportedId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ResetPasswordRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactEmailOrUsername")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GovernmentIssuePhotoId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LegalName")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherFiles")
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPasswordRequest");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SaveArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("SaveArticle");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SavePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("SavePost");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FirstUnreadCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstUserDeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FirstUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstUserPublicKey")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBothUserJoinedToChat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFirstUserDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSecondUserDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelfDestruct")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LatestMessageDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LatestMessageUserId")
                        .HasColumnType("int");

                    b.Property<int>("SecondUnreadCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SecondUserDeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SecondUserId")
                        .HasColumnType("int");

                    b.Property<string>("SecondUserPublicKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SelfDestructTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("SecretConversation");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AesEncryptedArticle")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedContentAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedMessageType")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedPost")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedProfile")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedStory")
                        .HasColumnType("longtext");

                    b.Property<string>("AesEncryptedText")
                        .HasColumnType("longtext");

                    b.Property<string>("AesIvEncryptedByRsaUsingReceiverPublicKey")
                        .HasColumnType("longtext");

                    b.Property<string>("AesIvEncryptedByRsaUsingSenderPublicKey")
                        .HasColumnType("longtext");

                    b.Property<string>("AesKeyEncryptedByRsaUsingReceiverPublicKey")
                        .HasColumnType("longtext");

                    b.Property<string>("AesKeyEncryptedByRsaUsingSenderPublicKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReceiverDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSenderDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSecretMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SecretConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSecretMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SecretConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("SecretMessage");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecurityAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SecurityQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityAnswer");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestion");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TotalAdsesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalArticleCommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalArticleLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalArticlesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPostCommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPostLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPostsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPromotedArticlesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPromotedPostsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalStoriesCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalTagsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalTagsViews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContentAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("HighLightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("StoryType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("HighLightId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("StoryComment");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Liked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("StoryLike");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StorySeen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("StorySeen");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Strike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Strike");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AddedToCouncilGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowDownloadPost")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("PriceId")
                        .HasColumnType("longtext");

                    b.Property<bool>("RemoveAds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Supportbadge")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Support");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Suspend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SuspendType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuspensionLiftingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Suspend");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UsesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<bool>("CommentNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Cover")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeleteAccountDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DirectNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalId")
                        .HasColumnType("longtext");

                    b.Property<bool>("FolloweBacknotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Ip")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeletedAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LegalName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LikeNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LinkBio")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("NotInterestedArticleIds")
                        .HasColumnType("longtext");

                    b.Property<string>("NotInterestedPostIds")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PrivateAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ProfessionalAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StripeAccountId")
                        .HasColumnType("longtext");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("longtext");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SuspensionLiftingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserTypes")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscount");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FolloweAcceptStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMutual")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollower");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SigInIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SigInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SigOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SignOutIp")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserMessageGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessageGroup");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserRefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SearchedId")
                        .HasColumnType("int");

                    b.Property<int>("SearcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SearchedId");

                    b.HasIndex("SearcherId");

                    b.ToTable("UserSearchAccount");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSearchArticle");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSearchGroup");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Place")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSearchPlace");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSearchPost");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Tag")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSearchTag");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UsersSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersSubscription");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserViewArticle");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserViewPost");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserViewTag");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserVisitLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<int>("LinkType")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVisitLink");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.VerificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GovernmentIssuePhotoId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OtheFiles")
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationRequestAcceptStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationRequest");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ViewArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewArticle");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.WarningBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("WarningBanner");
                });

            modelBuilder.Entity("Propagator.Common.Models.Events.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventData")
                        .HasColumnType("longtext");

                    b.Property<string>("EventType")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("EventModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AdminTodayLimitation", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Ads", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Adses")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Adses")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Ads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AppealAds", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Admin")
                        .WithMany("AppealAdss")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Ads", "Ads")
                        .WithMany("AppealAdss")
                        .HasForeignKey("AdsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Ads");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithOne("AppUser")
                        .HasForeignKey("Apsy.App.Propagator.Domain.Entities.AppUser", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Article", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleComment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Mention")
                        .WithMany("ArticleCommentMentions")
                        .HasForeignKey("MentionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.ArticleComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("ArticleComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Mention");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleLike", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.BlockUser", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Blocked")
                        .WithMany("Blockers")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Blocker")
                        .WithMany("Blocks")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Mention")
                        .WithMany("CommentMentions")
                        .HasForeignKey("MentionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("CommentPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mention");

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Admin");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.HideStory", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Hided")
                        .WithMany("HiderStory")
                        .HasForeignKey("HidedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Hider")
                        .WithMany("HidedStory")
                        .HasForeignKey("HiderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hided");

                    b.Navigation("Hider");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.HighLight", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.InterestedUser", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("InterestedUsers")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "FollowerUser")
                        .WithMany("InterestedUsers")
                        .HasForeignKey("FollowersUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("InterestedUsers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("FollowerUser");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeArticleComment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.ArticleComment", "ArticleComment")
                        .WithMany("LikeArticleComments")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeComment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Comment", "Comment")
                        .WithMany("LikeComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("LikeComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Link", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Links")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Links")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Message", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Messages")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Message", "ParentMessage")
                        .WithMany("ChildrenMessages")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Messages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Story", "Story")
                        .WithMany("Messages")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("Conversation");

                    b.Navigation("ParentMessage");

                    b.Navigation("Post");

                    b.Navigation("Profile");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Ads", "Ads")
                        .WithMany("Notifications")
                        .HasForeignKey("AdsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.ArticleComment", "ArticleComment")
                        .WithMany("Notifications")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Notifications")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.ArticleLike", "ArticleLike")
                        .WithMany("Notifications")
                        .HasForeignKey("ArticleLikeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Comment", "Comment")
                        .WithMany("Notifications")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.LikeArticleComment", "LikeArticleComment")
                        .WithMany("Notifications")
                        .HasForeignKey("LikeArticleCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.LikeComment", "LikeComment")
                        .WithMany("Notifications")
                        .HasForeignKey("LikeCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Message", "Message")
                        .WithMany("Notifications")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Notifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.PostLikes", "PostLike")
                        .WithMany("Notifications")
                        .HasForeignKey("PostLikeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Reciever")
                        .WithMany("RecieverNotifications")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Sender")
                        .WithMany("SenderNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.StoryComment", "StoryComment")
                        .WithMany("Notifications")
                        .HasForeignKey("StoryCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Story", null)
                        .WithMany("Notifications")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.StoryLike", "StoryLike")
                        .WithMany("Notifications")
                        .HasForeignKey("StoryLikeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.UserFollower", "UserFollower")
                        .WithMany("Notifications")
                        .HasForeignKey("UserFollowerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ads");

                    b.Navigation("Article");

                    b.Navigation("ArticleComment");

                    b.Navigation("ArticleLike");

                    b.Navigation("Comment");

                    b.Navigation("LikeArticleComment");

                    b.Navigation("LikeComment");

                    b.Navigation("Message");

                    b.Navigation("Post");

                    b.Navigation("PostLike");

                    b.Navigation("Reciever");

                    b.Navigation("Sender");

                    b.Navigation("StoryComment");

                    b.Navigation("StoryLike");

                    b.Navigation("UserFollower");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.NotInterestedArticle", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("NotInterestedArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("NotInterestedArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.NotInterestedPost", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("NotInterestedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("NotInterestedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Ads", "Ads")
                        .WithMany("Payments")
                        .HasForeignKey("AdsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ads");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Post", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Poster")
                        .WithMany("Posts")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.PostLikes", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Report", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.ArticleComment", "ArticleComment")
                        .WithMany("Reports")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Reports")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Message", "Message")
                        .WithMany("Reports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Reported")
                        .WithMany("Reporters")
                        .HasForeignKey("ReportedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ArticleComment");

                    b.Navigation("Comment");

                    b.Navigation("Message");

                    b.Navigation("Post");

                    b.Navigation("Reported");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ResetPasswordRequest", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("ResetPasswordRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SaveArticle", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("SaveArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("SaveArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SavePost", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("SavePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("SavePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretConversation", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretMessage", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.SecretMessage", "ParentSecretMessage")
                        .WithMany("ChildrenMessages")
                        .HasForeignKey("ParentSecretMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.SecretConversation", "SecretConversation")
                        .WithMany("SecretMessages")
                        .HasForeignKey("SecretConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentSecretMessage");

                    b.Navigation("Receiver");

                    b.Navigation("SecretConversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecurityAnswer", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.SecurityQuestion", "SecurityQuestion")
                        .WithMany("SecurityAnswers")
                        .HasForeignKey("SecurityQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SecurityQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Story", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Stories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.HighLight", "HighLight")
                        .WithMany("Stories")
                        .HasForeignKey("HighLightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Stories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("HighLight");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryComment", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Story", "Story")
                        .WithMany("StoryComments")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("StoryComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryLike", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Story", "Story")
                        .WithMany("StoryLikes")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("StoryLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StorySeen", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Story", "Story")
                        .WithMany("StorySeens")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("StorySeens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Strike", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("Strikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("Strikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Strikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Support", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Suspend", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("Suspends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserDiscount", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Discount", "Discount")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserFollower", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Follower")
                        .WithMany("Followees")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.AppUser", "AppUser")
                        .WithMany("UserLogins")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserMessageGroup", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Conversation", "Conversation")
                        .WithMany("UserGroups")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserMessageGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchAccount", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Searched")
                        .WithMany("SearcherAccounts")
                        .HasForeignKey("SearchedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Searcher")
                        .WithMany("SearchedAccounts")
                        .HasForeignKey("SearcherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Searched");

                    b.Navigation("Searcher");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchArticle", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("UserSearchArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserSearchArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchGroup", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Conversation", "Conversation")
                        .WithMany("UserSearchGroups")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserSearchGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchPlace", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserSearchPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchPost", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("UserSearchPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserSearchPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserSearchTag", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserSearchTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UsersSubscription", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Payment", "Payment")
                        .WithOne("UsersSubscription")
                        .HasForeignKey("Apsy.App.Propagator.Domain.Entities.UsersSubscription", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("UsersSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewArticle", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("UserViewArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserViewArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewPost", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("UserViewPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserViewPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserViewTag", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Tag", "Tag")
                        .WithMany("UserViewTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("UserViewTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserVisitLink", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("UserVisitLinks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("UserVisitLinks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.VerificationRequest", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ViewArticle", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.WarningBanner", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Article", "Article")
                        .WithMany("WarningBanners")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.Post", "Post")
                        .WithMany("WarningBanners")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "User")
                        .WithMany("WarningBanners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Propagator.Common.Models.Events.EventModel", b =>
                {
                    b.HasOne("Apsy.App.Propagator.Domain.Entities.User", "Admin")
                        .WithMany("EventModels")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Ads", b =>
                {
                    b.Navigation("AppealAdss");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Article", b =>
                {
                    b.Navigation("Adses");

                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleLikes");

                    b.Navigation("InterestedUsers");

                    b.Navigation("Links");

                    b.Navigation("Messages");

                    b.Navigation("NotInterestedArticles");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("SaveArticles");

                    b.Navigation("Stories");

                    b.Navigation("Strikes");

                    b.Navigation("UserSearchArticles");

                    b.Navigation("UserViewArticles");

                    b.Navigation("UserVisitLinks");

                    b.Navigation("WarningBanners");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleComment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LikeArticleComments");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.ArticleLike", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LikeComments");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserGroups");

                    b.Navigation("UserSearchGroups");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Discount", b =>
                {
                    b.Navigation("UserDiscounts");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.HighLight", b =>
                {
                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeArticleComment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.LikeComment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Message", b =>
                {
                    b.Navigation("ChildrenMessages");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Payment", b =>
                {
                    b.Navigation("UsersSubscription");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Post", b =>
                {
                    b.Navigation("Adses");

                    b.Navigation("Comments");

                    b.Navigation("InterestedUsers");

                    b.Navigation("Likes");

                    b.Navigation("Links");

                    b.Navigation("Messages");

                    b.Navigation("NotInterestedPosts");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("SavePosts");

                    b.Navigation("Stories");

                    b.Navigation("Strikes");

                    b.Navigation("UserSearchPosts");

                    b.Navigation("UserViewPosts");

                    b.Navigation("UserVisitLinks");

                    b.Navigation("WarningBanners");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.PostLikes", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretConversation", b =>
                {
                    b.Navigation("SecretMessages");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecretMessage", b =>
                {
                    b.Navigation("ChildrenMessages");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SecurityQuestion", b =>
                {
                    b.Navigation("SecurityAnswers");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Story", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("StoryComments");

                    b.Navigation("StoryLikes");

                    b.Navigation("StorySeens");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryComment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.StoryLike", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("UsersSubscriptions");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.Tag", b =>
                {
                    b.Navigation("UserViewTags");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("AppUser");

                    b.Navigation("AppealAdss");

                    b.Navigation("ArticleCommentMentions");

                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleLikes");

                    b.Navigation("Articles");

                    b.Navigation("Blockers");

                    b.Navigation("Blocks");

                    b.Navigation("CommentMentions");

                    b.Navigation("CommentPosts");

                    b.Navigation("EventModels");

                    b.Navigation("Followees");

                    b.Navigation("Followers");

                    b.Navigation("HidedStory");

                    b.Navigation("HiderStory");

                    b.Navigation("InterestedUsers");

                    b.Navigation("LikeComments");

                    b.Navigation("NotInterestedArticles");

                    b.Navigation("NotInterestedPosts");

                    b.Navigation("Payments");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("RecieverNotifications");

                    b.Navigation("Reporters");

                    b.Navigation("Reports");

                    b.Navigation("ResetPasswordRequests");

                    b.Navigation("SaveArticles");

                    b.Navigation("SavePosts");

                    b.Navigation("SearchedAccounts");

                    b.Navigation("SearcherAccounts");

                    b.Navigation("SenderNotifications");

                    b.Navigation("Stories");

                    b.Navigation("StoryComments");

                    b.Navigation("StoryLikes");

                    b.Navigation("StorySeens");

                    b.Navigation("Strikes");

                    b.Navigation("Supports");

                    b.Navigation("Suspends");

                    b.Navigation("UserDiscounts");

                    b.Navigation("UserMessageGroups");

                    b.Navigation("UserSearchArticles");

                    b.Navigation("UserSearchGroups");

                    b.Navigation("UserSearchPlaces");

                    b.Navigation("UserSearchPosts");

                    b.Navigation("UserSearchTags");

                    b.Navigation("UserViewArticles");

                    b.Navigation("UserViewPosts");

                    b.Navigation("UserViewTags");

                    b.Navigation("VerificationRequests");

                    b.Navigation("WarningBanners");
                });

            modelBuilder.Entity("Apsy.App.Propagator.Domain.Entities.UserFollower", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
